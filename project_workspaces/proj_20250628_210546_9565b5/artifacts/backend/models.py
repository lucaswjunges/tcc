```json
{
    "file_content": "from flask_sqlalchemy import SQLAlchemy\nfrom datetime import datetime\n\ndb = SQLAlchemy()\n\n# User model\nclass User(db.Model):\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password = db.Column(db.String(120), nullable=False)\n    posts = db.relationship('BlogPost', backref='author', lazy=True)\n    comments = db.relationship('Comment', backref='author', lazy=True)\n    # Methods for user operations\n    def __repr__(self):\n        return '<User %r>' % self.username\n\n# Blog Post model\nclass BlogPost(db.Model):\n    __tablename__ = 'blog_posts'\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100), nullable=False)\n    content = db.Column(db.Text, nullable=False)\n    date_posted = db.Column(db.DateTime, default=datetime.utcnow)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    comments = db.relationship('Comment', backref='post', lazy=True)\n    likes = db.Column(db.Integer, default=0)\n    # Methods for blog post operations\n    def __repr__(self):\n        return '<BlogPost %r>' % self.title\n\n# Comment model\nclass Comment(db.Model):\n    __tablename__ = 'comments'\n    id = db.Column(db.Integer, primary_key=True)\n    content = db.Column(db.Text, nullable=False)\n    date_commented = db.Column(db.DateTime, default=datetime.utcnow)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    post_id = db.Column(db.Integer, db.ForeignKey('blog_posts.id'), nullable=False)\n    # Methods for comment operations\n    def __repr__(self):\n        return '<Comment %r>' % self.content\n\n# Category model\nclass Category(db.Model):\n    __tablename__ = 'categories'\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(50), unique=True, nullable=False)\n    posts = db.relationship('BlogPost', backref='category', lazy=True)\n    # Methods for category operations\n    def __repr__(self):\n        return '<Category %r>' % self.name\n\n# Tag model (if needed)\nclass Tag(db.Model):\n    __tablename__ = 'tags'\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(30), unique=True, nullable=False)\n    # Relationships to BlogPost\n    posts = db.relationship('BlogPost', secondary='post_tags', backref='tags')\n    \n    # Association table for BlogPost and Tag\npost_tags = db.Table('post_tags',\n    db.Column('post_id', db.Integer, db.ForeignKey('blog_posts.id')),\n    db.Column('tag_id', db.Integer, db.ForeignKey('tags.id'))\n)\n    # Methods for tag operations\n    def __repr__(self):\n        return '<Tag %r>' % self.name\n\n# Review model\nclass Review