#!/usr/bin/env python3
"""
Verifica√ß√£o de setup do MCP LLM Server.
"""

import sys
import os
from pathlib import Path

def check_python_version():
    """Verifica vers√£o do Python."""
    print("üîÑ Verificando vers√£o do Python...")
    
    if sys.version_info < (3, 9):
        print(f"‚ùå Python 3.9+ √© necess√°rio. Vers√£o atual: {sys.version}")
        return False
    
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    return True

def check_dependencies():
    """Verifica se as depend√™ncias est√£o instaladas."""
    print("\nüîÑ Verificando depend√™ncias principais...")
    
    required_packages = [
        ("pydantic", "2.0"),
        ("pydantic_settings", "2.0"),
        ("httpx", "0.24"),
        ("aiohttp", "3.8"),
        ("structlog", "23.0"),
        ("rich", "13.0"),
        ("cryptography", "40.0"),
    ]
    
    missing = []
    
    for package, min_version in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package} (n√£o instalado)")
            missing.append(package)
    
    if missing:
        print(f"\nüì¶ Para instalar depend√™ncias faltantes:")
        print(f"pip install {' '.join(missing)}")
        return False
    
    return True

def check_optional_dependencies():
    """Verifica depend√™ncias opcionais para LLMs."""
    print("\nüîÑ Verificando clientes LLM...")
    
    llm_packages = [
        ("openai", "OpenAI GPT-4"),
        ("anthropic", "Claude"),
        ("google.generativeai", "Gemini"),
    ]
    
    available = []
    
    for package, name in llm_packages:
        try:
            __import__(package)
            print(f"‚úÖ {name} ({package})")
            available.append(name)
        except ImportError:
            print(f"‚ö†Ô∏è  {name} ({package}) - n√£o instalado")
    
    if not available:
        print("\nüì¶ Para instalar clientes LLM:")
        print("pip install openai anthropic google-generativeai")
        return False
    
    print(f"\nüéØ Clientes LLM dispon√≠veis: {', '.join(available)}")
    return True

def check_configuration():
    """Verifica arquivos de configura√ß√£o."""
    print("\nüîÑ Verificando configura√ß√£o...")
    
    project_dir = Path(__file__).parent
    
    # Verifica .env.example
    env_example = project_dir / ".env.example"
    if env_example.exists():
        print("‚úÖ .env.example encontrado")
    else:
        print("‚ùå .env.example n√£o encontrado")
        return False
    
    # Verifica se .env existe
    env_file = project_dir / ".env"
    if env_file.exists():
        print("‚úÖ .env encontrado")
    else:
        print("‚ö†Ô∏è  .env n√£o encontrado - copie de .env.example")
    
    # Verifica estrutura do projeto
    src_dir = project_dir / "src" / "mcp_llm_server"
    if src_dir.exists():
        print("‚úÖ Estrutura do projeto OK")
    else:
        print("‚ùå Estrutura do projeto incorreta")
        return False
    
    return True

def check_environment_variables():
    """Verifica vari√°veis de ambiente b√°sicas."""
    print("\nüîÑ Verificando vari√°veis de ambiente...")
    
    # Carrega .env se existir
    env_file = Path(__file__).parent / ".env"
    if env_file.exists():
        print("‚úÖ Carregando .env...")
        try:
            from dotenv import load_dotenv
            load_dotenv(env_file)
        except ImportError:
            print("‚ö†Ô∏è  python-dotenv n√£o instalado - instale com: pip install python-dotenv")
    
    # Verifica se pelo menos uma API key est√° configurada
    api_keys = [
        ("OPENAI_API_KEY", "OpenAI"),
        ("CLAUDE_API_KEY", "Claude"),
        ("OPENROUTER_API_KEY", "OpenRouter"), 
        ("GEMINI_API_KEY", "Gemini"),
    ]
    
    configured = []
    for env_var, name in api_keys:
        if os.getenv(env_var):
            print(f"‚úÖ {name} API key configurada")
            configured.append(name)
        else:
            print(f"‚ö†Ô∏è  {name} API key n√£o configurada ({env_var})")
    
    if not configured:
        print("\n‚ö†Ô∏è  Nenhuma API key configurada. Configure pelo menos uma no arquivo .env")
        return False
    
    print(f"\nüéØ Provedores configurados: {', '.join(configured)}")
    return True

def main():
    """Fun√ß√£o principal."""
    print("üöÄ MCP LLM Server - Verifica√ß√£o de Setup\n")
    
    checks = [
        ("Vers√£o Python", check_python_version),
        ("Depend√™ncias Core", check_dependencies),
        ("Clientes LLM", check_optional_dependencies),
        ("Configura√ß√£o", check_configuration),
        ("Vari√°veis de Ambiente", check_environment_variables),
    ]
    
    results = []
    
    for name, check_func in checks:
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå Erro em {name}: {e}")
            results.append((name, False))
    
    # Resumo
    print("\n" + "="*50)
    print("üìä RESUMO DA VERIFICA√á√ÉO")
    print("="*50)
    
    passed = 0
    for name, result in results:
        status = "‚úÖ OK" if result else "‚ùå FALHOU"
        print(f"{name:<25} {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ Status: {passed}/{len(results)} verifica√ß√µes passaram")
    
    if passed == len(results):
        print("\nüéâ Setup completo! O servidor est√° pronto para uso.")
        print("\nüìù Pr√≥ximos passos:")
        print("   1. pip install -r requirements.txt")
        print("   2. python -m mcp_llm_server")
        print("   3. claude mcp add llm-server 'python -m mcp_llm_server'")
    elif passed >= len(results) - 1:
        print("\n‚ö†Ô∏è  Setup quase completo. Verifique os itens marcados como FALHOU.")
    else:
        print("\nüí• Setup incompleto. Corrija os problemas antes de continuar.")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())