#!/usr/bin/env python3
"""
Sistema Metacognitivo para Evolux Engine
=======================================

Implementa metacogni√ß√£o verdadeira - o sistema "pensa sobre como pensa".
Reaproveitando e melhorando c√≥digo dos commits anteriores.

Funcionalidades:
üß† Auto-reflex√£o sobre processos cognitivos  
üîç Meta-avalia√ß√£o de estrat√©gias de pensamento
üéØ Adapta√ß√£o din√¢mica de abordagens cognitivas
üìö Meta-aprendizado (aprender como aprender melhor)
üß© Teoria da mente sobre si mesmo
‚ö° Integra√ß√£o com Sistema A2A Inteligente
"""

import asyncio
import json
import time
import numpy as np
from typing import Dict, List, Any, Optional, Tuple, Set
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from enum import Enum
from collections import defaultdict, deque
import hashlib
from pathlib import Path

from evolux_engine.schemas.contracts import Task, TaskType, ExecutionResult, ValidationResult
from evolux_engine.models.project_context import ProjectContext
from evolux_engine.utils.logging_utils import get_structured_logger

logger = get_structured_logger("metacognitive_engine")


class MetaCognitiveState(Enum):
    """Estados metacognitivos do sistema"""
    SELF_ANALYZING = "self_analyzing"      # Analisando pr√≥prios processos
    STRATEGY_REFLECTING = "strategy_reflecting"  # Refletindo sobre estrat√©gias
    CAPABILITY_EVALUATING = "capability_evaluating"  # Avaliando capacidades
    PROCESS_OPTIMIZING = "process_optimizing"  # Otimizando processos
    META_LEARNING = "meta_learning"        # Aprendendo sobre aprendizado


class ThinkingStrategy(Enum):
    """Estrat√©gias de pensamento dispon√≠veis"""
    ANALYTICAL = "analytical"             # An√°lise l√≥gica sequencial
    CREATIVE = "creative"                 # Pensamento divergente
    SYSTEMATIC = "systematic"             # Abordagem sistem√°tica
    INTUITIVE = "intuitive"              # Insights baseados em padr√µes
    COLLABORATIVE = "collaborative"       # Pensamento distribu√≠do (A2A)
    REFLECTIVE = "reflective"            # Auto-reflex√£o


class CognitiveLimit(Enum):
    """Tipos de limita√ß√µes cognitivas identificadas"""
    WORKING_MEMORY = "working_memory"     # Limita√ß√µes de mem√≥ria de trabalho
    CONTEXT_SWITCHING = "context_switching"  # Dificuldade em trocar contexto
    PATTERN_RECOGNITION = "pattern_recognition"  # Limita√ß√µes em reconhecimento
    STRATEGIC_PLANNING = "strategic_planning"  # Limita√ß√µes no planejamento
    CREATIVE_THINKING = "creative_thinking"  # Limita√ß√µes criativas


@dataclass
class MetaCognitiveInsight:
    """Insight metacognitivo sobre pr√≥prios processos"""
    insight_id: str
    timestamp: datetime
    insight_type: str  # "strategy_effectiveness", "cognitive_bias", "limitation_discovery"
    description: str
    evidence: Dict[str, Any]
    confidence: float
    impact_assessment: Dict[str, float]
    actionable_changes: List[str]


@dataclass
class ThinkingProcessAnalysis:
    """An√°lise de um processo de pensamento"""
    process_id: str
    strategy_used: ThinkingStrategy
    context: Dict[str, Any]
    steps_taken: List[Dict[str, Any]]
    effectiveness_score: float
    efficiency_score: float
    identified_issues: List[str]
    improvement_suggestions: List[str]
    meta_reflection: str


@dataclass
class CognitiveCapabilityProfile:
    """Perfil de capacidades cognitivas do sistema"""
    analytical_strength: float = 0.0
    creative_strength: float = 0.0
    pattern_recognition: float = 0.0
    strategic_planning: float = 0.0
    collaborative_ability: float = 0.0
    meta_awareness: float = 0.0
    identified_limits: Set[CognitiveLimit] = field(default_factory=set)
    strength_areas: List[str] = field(default_factory=list)
    improvement_areas: List[str] = field(default_factory=list)


class MetaCognitiveEngine:
    """
    Motor Metacognitivo - Sistema que "pensa sobre como pensa"
    """
    
    def __init__(self):
        self.state = MetaCognitiveState.SELF_ANALYZING
        self.thinking_history: deque = deque(maxlen=1000)
        self.insights: List[MetaCognitiveInsight] = []
        self.cognitive_profile = CognitiveCapabilityProfile()
        self.strategy_effectiveness: Dict[ThinkingStrategy, float] = {}
        self.meta_learning_data: Dict[str, Any] = {}
        self.process_analyses: List[ThinkingProcessAnalysis] = []
        
        # Integra√ß√£o com A2A
        self.a2a_metacognition: Dict[str, Any] = {}
        self.collaborative_thinking_patterns: Dict[str, Any] = {}
        
        logger.info("üß† MetaCognitiveEngine inicializado - Auto-reflex√£o ativada")
    
    async def reflect_on_thinking_process(self, process_context: Dict[str, Any]) -> ThinkingProcessAnalysis:
        """
        Reflex√£o sobre um processo de pensamento espec√≠fico
        CORE DA METACOGNI√á√ÉO: O sistema analisa como pensou
        """
        logger.info("ü§î Iniciando reflex√£o sobre processo de pensamento")
        
        analysis = ThinkingProcessAnalysis(
            process_id=self._generate_process_id(),
            strategy_used=ThinkingStrategy(process_context.get("strategy", "analytical")),
            context=process_context,
            steps_taken=process_context.get("steps", []),
            effectiveness_score=0.0,
            efficiency_score=0.0,
            identified_issues=[],
            improvement_suggestions=[],
            meta_reflection=""
        )
        
        # Analisar efetividade da estrat√©gia usada
        analysis.effectiveness_score = await self._evaluate_strategy_effectiveness(
            analysis.strategy_used, process_context
        )
        
        # Analisar efici√™ncia do processo
        analysis.efficiency_score = await self._evaluate_process_efficiency(process_context)
        
        # Identificar problemas no pr√≥prio pensamento
        analysis.identified_issues = await self._identify_thinking_issues(process_context)
        
        # Gerar sugest√µes de melhoria
        analysis.improvement_suggestions = await self._generate_improvement_suggestions(analysis)
        
        # Meta-reflex√£o: reflex√£o sobre a reflex√£o
        analysis.meta_reflection = await self._generate_meta_reflection(analysis)
        
        self.process_analyses.append(analysis)
        
        logger.info(f"‚úÖ Reflex√£o conclu√≠da - Efetividade: {analysis.effectiveness_score:.2f}")
        return analysis
    
    async def evaluate_own_capabilities(self) -> CognitiveCapabilityProfile:
        """
        Auto-avalia√ß√£o das pr√≥prias capacidades cognitivas
        METACOGNI√á√ÉO: Conhecer as pr√≥prias limita√ß√µes e for√ßas
        """
        logger.info("üîç Iniciando auto-avalia√ß√£o de capacidades cognitivas")
        
        # Analisar hist√≥rico de performance por √°rea
        if self.thinking_history:
            analytical_scores = []
            creative_scores = []
            pattern_scores = []
            strategic_scores = []
            
            for entry in self.thinking_history:
                if entry.get("type") == "analytical":
                    analytical_scores.append(entry.get("effectiveness", 0.5))
                elif entry.get("type") == "creative":
                    creative_scores.append(entry.get("effectiveness", 0.5))
                # ... mais tipos
            
            # Atualizar perfil baseado em dados hist√≥ricos
            if analytical_scores:
                self.cognitive_profile.analytical_strength = np.mean(analytical_scores)
            if creative_scores:
                self.cognitive_profile.creative_strength = np.mean(creative_scores)
        
        # Identificar limita√ß√µes atrav√©s de an√°lise de falhas
        await self._identify_cognitive_limitations()
        
        # Identificar √°reas de for√ßa
        await self._identify_strength_areas()
        
        # Auto-consci√™ncia metacognitiva
        self.cognitive_profile.meta_awareness = await self._calculate_meta_awareness()
        
        logger.info(f"üìä Auto-avalia√ß√£o conclu√≠da - Meta-awareness: {self.cognitive_profile.meta_awareness:.2f}")
        return self.cognitive_profile
    
    async def adapt_thinking_strategy(self, current_context: Dict[str, Any]) -> ThinkingStrategy:
        """
        Adapta estrat√©gia de pensamento baseada em auto-reflex√£o
        METACOGNI√á√ÉO: Escolher como pensar baseado em como pensou antes
        """
        logger.info("üéØ Adaptando estrat√©gia de pensamento baseada em auto-reflex√£o")
        
        # Analisar contexto atual
        problem_type = current_context.get("problem_type", "general")
        complexity = current_context.get("complexity", "medium")
        available_resources = current_context.get("resources", {})
        
        # Consultar hist√≥rico de efetividade por estrat√©gia
        best_strategy = ThinkingStrategy.ANALYTICAL  # default
        best_score = 0.0
        
        for strategy, effectiveness in self.strategy_effectiveness.items():
            # Verificar se estrat√©gia √© adequada para o contexto
            if await self._is_strategy_suitable(strategy, current_context):
                if effectiveness > best_score:
                    best_score = effectiveness
                    best_strategy = strategy
        
        # Se temos agentes A2A dispon√≠veis, considerar pensamento colaborativo
        if available_resources.get("a2a_agents", 0) >= 2:
            if self.strategy_effectiveness.get(ThinkingStrategy.COLLABORATIVE, 0) > best_score:
                best_strategy = ThinkingStrategy.COLLABORATIVE
        
        # Meta-decis√£o: questionar a pr√≥pria escolha
        meta_confidence = await self._evaluate_strategy_choice_confidence(best_strategy, current_context)
        
        if meta_confidence < 0.7:
            # Baixa confian√ßa na escolha - usar estrat√©gia reflexiva
            best_strategy = ThinkingStrategy.REFLECTIVE
            logger.info("ü§î Baixa confian√ßa na estrat√©gia - usando abordagem reflexiva")
        
        logger.info(f"üéØ Estrat√©gia selecionada: {best_strategy.value} (confian√ßa: {meta_confidence:.2f})")
        return best_strategy
    
    async def meta_learn_from_experience(self, experience: Dict[str, Any]) -> MetaCognitiveInsight:
        """
        Meta-aprendizado: Aprender sobre como aprender melhor
        METACOGNI√á√ÉO: Otimizar pr√≥prios processos de aprendizado
        """
        logger.info("üìö Iniciando meta-aprendizado sobre experi√™ncia")
        
        # Extrair padr√µes sobre como o aprendizado ocorreu
        learning_pattern = await self._extract_learning_patterns(experience)
        
        # Identificar o que funcionou/n√£o funcionou no processo de aprendizado
        learning_effectiveness = await self._evaluate_learning_effectiveness(experience)
        
        # Gerar insight metacognitivo
        insight = MetaCognitiveInsight(
            insight_id=self._generate_insight_id(),
            timestamp=datetime.utcnow(),
            insight_type="meta_learning",
            description=f"Aprendizado sobre processo de aprendizado: {learning_pattern['description']}",
            evidence=learning_pattern,
            confidence=learning_effectiveness,
            impact_assessment={"learning_efficiency": learning_effectiveness},
            actionable_changes=learning_pattern.get("improvements", [])
        )
        
        self.insights.append(insight)
        
        # Atualizar estrat√©gias de aprendizado baseado no insight
        await self._update_learning_strategies(insight)
        
        logger.info(f"üß† Meta-aprendizado conclu√≠do - Insight: {insight.description}")
        return insight
    
    async def integrate_with_a2a_system(self, a2a_system) -> Dict[str, Any]:
        """
        Integra√ß√£o metacognitiva com Sistema A2A
        METACOGNI√á√ÉO COLABORATIVA: Reflex√£o sobre colabora√ß√£o entre agentes
        """
        logger.info("ü§ù Integrando metacogni√ß√£o com Sistema A2A")
        
        # Analisar padr√µes de colabora√ß√£o
        collaboration_patterns = await self._analyze_a2a_collaboration_patterns(a2a_system)
        
        # Reflex√£o sobre efetividade da colabora√ß√£o
        collaboration_effectiveness = await self._evaluate_collaboration_thinking(a2a_system)
        
        # Meta-insights sobre pensamento distribu√≠do
        distributed_thinking_insights = await self._generate_distributed_thinking_insights(
            collaboration_patterns, collaboration_effectiveness
        )
        
        # Otimizar estrat√©gias de colabora√ß√£o cognitiva
        optimized_strategies = await self._optimize_collaborative_thinking(distributed_thinking_insights)
        
        integration_result = {
            "collaboration_patterns": collaboration_patterns,
            "effectiveness_score": collaboration_effectiveness,
            "meta_insights": distributed_thinking_insights,
            "optimized_strategies": optimized_strategies,
            "integration_timestamp": datetime.utcnow().isoformat()
        }
        
        self.a2a_metacognition = integration_result
        
        logger.info(f"üß† Integra√ß√£o A2A conclu√≠da - Efetividade: {collaboration_effectiveness:.2f}")
        return integration_result
    
    async def generate_self_model(self) -> Dict[str, Any]:
        """
        Gera um modelo interno de como o sistema funciona
        METACOGNI√á√ÉO: Auto-consci√™ncia estrutural
        """
        logger.info("üß© Gerando modelo interno de auto-consci√™ncia")
        
        self_model = {
            "cognitive_architecture": {
                "thinking_strategies": [s.value for s in ThinkingStrategy],
                "current_state": self.state.value,
                "processing_capacity": await self._assess_processing_capacity(),
                "meta_awareness_level": self.cognitive_profile.meta_awareness
            },
            "operational_patterns": {
                "preferred_strategies": await self._identify_preferred_strategies(),
                "common_failure_modes": await self._identify_failure_modes(),
                "adaptation_speed": await self._calculate_adaptation_speed(),
                "learning_velocity": await self._calculate_learning_velocity()
            },
            "limitations": {
                "identified_limits": [limit.value for limit in self.cognitive_profile.identified_limits],
                "performance_boundaries": await self._map_performance_boundaries(),
                "resource_constraints": await self._identify_resource_constraints()
            },
            "strengths": {
                "capability_scores": {
                    "analytical": self.cognitive_profile.analytical_strength,
                    "creative": self.cognitive_profile.creative_strength,
                    "collaborative": self.cognitive_profile.collaborative_ability
                },
                "expertise_areas": self.cognitive_profile.strength_areas
            },
            "meta_knowledge": {
                "self_understanding_depth": await self._calculate_self_understanding(),
                "bias_awareness": await self._assess_bias_awareness(),
                "uncertainty_handling": await self._evaluate_uncertainty_handling()
            }
        }
        
        logger.info("üß© Modelo de auto-consci√™ncia gerado")
        return self_model
    
    async def question_own_assumptions(self, context: Dict[str, Any]) -> List[str]:
        """
        Questiona as pr√≥prias suposi√ß√µes e vieses
        METACOGNI√á√ÉO: Auto-cr√≠tica construtiva
        """
        logger.info("‚ùì Questionando pr√≥prias suposi√ß√µes")
        
        questions = []
        
        # Questionar suposi√ß√µes sobre o problema
        if "problem_definition" in context:
            questions.extend([
                "Estou definindo o problema corretamente?",
                "H√° aspectos do problema que estou ignorando?",
                "Minhas suposi√ß√µes sobre o problema s√£o v√°lidas?"
            ])
        
        # Questionar estrat√©gia escolhida
        if "chosen_strategy" in context:
            questions.extend([
                "Por que escolhi esta estrat√©gia espec√≠fica?",
                "Existe uma abordagem melhor que n√£o considerei?",
                "Estou sendo influenciado por sucessos/falhas passados?"
            ])
        
        # Questionar pr√≥prios vieses
        questions.extend([
            "Que vieses cognitivos podem estar afetando meu julgamento?",
            "Estou sendo overconfident ou underconfident?",
            "H√° informa√ß√µes contradit√≥rias que estou ignorando?"
        ])
        
        # Auto-questionar sobre metacogni√ß√£o
        questions.extend([
            "Estou sendo suficientemente reflexivo?",
            "Minha an√°lise metacognitiva √© profunda o suficiente?",
            "Estou questionando minhas pr√≥prias quest√µes?"
        ])
        
        logger.info(f"‚ùì Geradas {len(questions)} quest√µes auto-reflexivas")
        return questions
    
    # ============================================================================
    # M√âTODOS AUXILIARES PRIVADOS
    # ============================================================================
    
    async def _evaluate_strategy_effectiveness(self, strategy: ThinkingStrategy, context: Dict[str, Any]) -> float:
        """Avalia efetividade de uma estrat√©gia espec√≠fica"""
        # Simular an√°lise baseada em contexto e hist√≥rico
        base_score = self.strategy_effectiveness.get(strategy, 0.5)
        
        # Ajustar baseado no contexto
        if strategy == ThinkingStrategy.ANALYTICAL and context.get("complexity") == "high":
            base_score += 0.2
        elif strategy == ThinkingStrategy.CREATIVE and context.get("problem_type") == "novel":
            base_score += 0.3
        elif strategy == ThinkingStrategy.COLLABORATIVE and context.get("agents_available", 0) > 2:
            base_score += 0.25
        
        return min(1.0, max(0.0, base_score))
    
    async def _evaluate_process_efficiency(self, context: Dict[str, Any]) -> float:
        """Avalia efici√™ncia de um processo"""
        time_taken = context.get("execution_time", 1.0)
        complexity = context.get("complexity", "medium")
        
        # Efici√™ncia baseada em tempo vs complexidade
        expected_time = {"low": 0.5, "medium": 1.0, "high": 2.0}.get(complexity, 1.0)
        efficiency = expected_time / max(time_taken, 0.1)
        
        return min(1.0, efficiency)
    
    async def _identify_thinking_issues(self, context: Dict[str, Any]) -> List[str]:
        """Identifica problemas no processo de pensamento"""
        issues = []
        
        if context.get("iterations", 1) > 3:
            issues.append("Muitas itera√ß√µes - poss√≠vel lack of planning")
        
        if context.get("confidence", 1.0) < 0.5:
            issues.append("Baixa confian√ßa - necess√°ria mais valida√ß√£o")
        
        if context.get("context_switches", 0) > 5:
            issues.append("Muitas mudan√ßas de contexto - poss√≠vel falta de foco")
        
        return issues
    
    async def _generate_improvement_suggestions(self, analysis: ThinkingProcessAnalysis) -> List[str]:
        """Gera sugest√µes de melhoria baseadas na an√°lise"""
        suggestions = []
        
        if analysis.effectiveness_score < 0.6:
            suggestions.append("Considerar estrat√©gia alternativa de pensamento")
        
        if analysis.efficiency_score < 0.5:
            suggestions.append("Otimizar processo para reduzir tempo de execu√ß√£o")
        
        if "lack of planning" in analysis.identified_issues:
            suggestions.append("Investir mais tempo em planejamento inicial")
        
        return suggestions
    
    async def _generate_meta_reflection(self, analysis: ThinkingProcessAnalysis) -> str:
        """Gera meta-reflex√£o sobre a an√°lise"""
        return f"Reflex√£o sobre {analysis.strategy_used.value}: " \
               f"Efetividade {analysis.effectiveness_score:.2f}, " \
               f"principais learnings: {', '.join(analysis.improvement_suggestions[:2])}"
    
    def _generate_process_id(self) -> str:
        """Gera ID √∫nico para processo"""
        return f"proc_{int(time.time())}_{hash(str(datetime.utcnow())) % 10000}"
    
    def _generate_insight_id(self) -> str:
        """Gera ID √∫nico para insight"""
        return f"insight_{int(time.time())}_{hash(str(datetime.utcnow())) % 10000}"
    
    async def _identify_cognitive_limitations(self):
        """Identifica limita√ß√µes cognitivas atrav√©s de an√°lise de falhas"""
        # Analisar padr√µes de falha para identificar limita√ß√µes
        failure_patterns = await self._analyze_failure_patterns()
        
        if failure_patterns.get("working_memory_overload", 0) > 0.3:
            self.cognitive_profile.identified_limits.add(CognitiveLimit.WORKING_MEMORY)
        
        if failure_patterns.get("context_confusion", 0) > 0.3:
            self.cognitive_profile.identified_limits.add(CognitiveLimit.CONTEXT_SWITCHING)
    
    async def _analyze_failure_patterns(self) -> Dict[str, float]:
        """Analisa padr√µes de falha"""
        # Simula√ß√£o - em implementa√ß√£o real, analisaria hist√≥rico de falhas
        return {
            "working_memory_overload": 0.2,
            "context_confusion": 0.1,
            "pattern_miss": 0.15
        }
    
    async def _identify_strength_areas(self):
        """Identifica √°reas de for√ßa cognitiva"""
        if self.cognitive_profile.analytical_strength > 0.8:
            self.cognitive_profile.strength_areas.append("analytical_reasoning")
        
        if self.cognitive_profile.collaborative_ability > 0.8:
            self.cognitive_profile.strength_areas.append("distributed_cognition")
    
    async def _calculate_meta_awareness(self) -> float:
        """Calcula n√≠vel de auto-consci√™ncia metacognitiva"""
        # Baseado em n√∫mero de insights e qualidade de auto-reflex√£o
        insights_count = len(self.insights)
        reflection_depth = len(self.process_analyses)
        
        base_awareness = min(1.0, (insights_count * 0.1) + (reflection_depth * 0.05))
        return base_awareness
    
    async def _is_strategy_suitable(self, strategy: ThinkingStrategy, context: Dict[str, Any]) -> bool:
        """Verifica se estrat√©gia √© adequada para o contexto"""
        problem_type = context.get("problem_type", "general")
        
        if strategy == ThinkingStrategy.CREATIVE and problem_type in ["novel", "innovative"]:
            return True
        elif strategy == ThinkingStrategy.ANALYTICAL and problem_type in ["logical", "mathematical"]:
            return True
        elif strategy == ThinkingStrategy.COLLABORATIVE and context.get("agents_available", 0) >= 2:
            return True
        
        return True  # Estrat√©gias gerais s√£o sempre adequadas
    
    async def _evaluate_strategy_choice_confidence(self, strategy: ThinkingStrategy, context: Dict[str, Any]) -> float:
        """Avalia confian√ßa na escolha de estrat√©gia"""
        # Baseado em hist√≥rico de sucesso da estrat√©gia no contexto similar
        historical_success = self.strategy_effectiveness.get(strategy, 0.5)
        context_fit = 0.8 if await self._is_strategy_suitable(strategy, context) else 0.3
        
        return (historical_success + context_fit) / 2
    
    async def _extract_learning_patterns(self, experience: Dict[str, Any]) -> Dict[str, Any]:
        """Extrai padr√µes de como o aprendizado ocorreu"""
        return {
            "description": "Padr√£o de aprendizado identificado",
            "learning_speed": experience.get("learning_speed", 1.0),
            "retention_rate": experience.get("retention", 0.8),
            "improvements": ["Melhor estrutura√ß√£o de informa√ß√£o", "Mais itera√ß√µes reflexivas"]
        }
    
    async def _evaluate_learning_effectiveness(self, experience: Dict[str, Any]) -> float:
        """Avalia efetividade do processo de aprendizado"""
        return experience.get("learning_effectiveness", 0.7)
    
    async def _update_learning_strategies(self, insight: MetaCognitiveInsight):
        """Atualiza estrat√©gias de aprendizado baseado em insight"""
        for change in insight.actionable_changes:
            # Implementar mudan√ßas nas estrat√©gias
            logger.info(f"üìö Implementando mudan√ßa: {change}")
    
    async def _analyze_a2a_collaboration_patterns(self, a2a_system) -> Dict[str, Any]:
        """Analisa padr√µes de colabora√ß√£o A2A"""
        return {
            "collaboration_frequency": 0.8,
            "information_sharing_quality": 0.9,
            "distributed_decision_making": 0.7
        }
    
    async def _evaluate_collaboration_thinking(self, a2a_system) -> float:
        """Avalia efetividade do pensamento colaborativo"""
        return 0.85
    
    async def _generate_distributed_thinking_insights(self, patterns: Dict, effectiveness: float) -> List[str]:
        """Gera insights sobre pensamento distribu√≠do"""
        return [
            "Colabora√ß√£o A2A melhora qualidade de decis√µes complexas",
            "Distribui√ß√£o de carga cognitiva aumenta efici√™ncia",
            "Necess√°rio melhor sincroniza√ß√£o entre agentes"
        ]
    
    async def _optimize_collaborative_thinking(self, insights: List[str]) -> Dict[str, Any]:
        """Otimiza estrat√©gias de pensamento colaborativo"""
        return {
            "improved_sync_mechanisms": True,
            "better_load_distribution": True,
            "enhanced_communication": True
        }
    
    async def _assess_processing_capacity(self) -> float:
        """Avalia capacidade de processamento atual"""
        return 0.75
    
    async def _identify_preferred_strategies(self) -> List[str]:
        """Identifica estrat√©gias preferenciais"""
        return ["analytical", "collaborative"]
    
    async def _identify_failure_modes(self) -> List[str]:
        """Identifica modos comuns de falha"""
        return ["overconfidence", "context_loss", "insufficient_reflection"]
    
    async def _calculate_adaptation_speed(self) -> float:
        """Calcula velocidade de adapta√ß√£o"""
        return 0.8
    
    async def _calculate_learning_velocity(self) -> float:
        """Calcula velocidade de aprendizado"""
        return 0.7
    
    async def _map_performance_boundaries(self) -> Dict[str, float]:
        """Mapeia limites de performance"""
        return {
            "max_concurrent_tasks": 10.0,
            "max_complexity_level": 8.0,
            "optimal_context_size": 5.0
        }
    
    async def _identify_resource_constraints(self) -> List[str]:
        """Identifica restri√ß√µes de recursos"""
        return ["memory_capacity", "processing_time", "context_window"]
    
    async def _calculate_self_understanding(self) -> float:
        """Calcula profundidade de auto-compreens√£o"""
        return 0.6
    
    async def _assess_bias_awareness(self) -> float:
        """Avalia consci√™ncia de vieses pr√≥prios"""
        return 0.7
    
    async def _evaluate_uncertainty_handling(self) -> float:
        """Avalia capacidade de lidar com incerteza"""
        return 0.65


# Singleton para metacogni√ß√£o global
_metacognitive_engine = None

def get_metacognitive_engine() -> MetaCognitiveEngine:
    """Obt√©m inst√¢ncia singleton do motor metacognitivo"""
    global _metacognitive_engine
    if _metacognitive_engine is None:
        _metacognitive_engine = MetaCognitiveEngine()
    return _metacognitive_engine