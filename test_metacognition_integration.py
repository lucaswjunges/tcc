#!/usr/bin/env python3
"""
Teste de Integra√ß√£o da Metacogni√ß√£o com o Sistema Evolux
=========================================================

Testa se a metacogni√ß√£o est√° funcionando corretamente integrada 
com o sistema A2A e o Orchestrator.
"""

import asyncio
import sys
from pathlib import Path

# Adicionar caminho do projeto ao Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from evolux_engine.core.metacognitive_engine import get_metacognitive_engine
from evolux_engine.core.intelligent_a2a_system import get_intelligent_a2a_system
from evolux_engine.utils.logging_utils import get_structured_logger

logger = get_structured_logger("metacognition_test")

async def test_metacognitive_engine():
    """Testa funcionalidades b√°sicas do motor metacognitivo"""
    logger.info("üß† Testando Motor Metacognitivo...")
    
    # Obter inst√¢ncia do motor metacognitivo
    metacognitive_engine = get_metacognitive_engine()
    
    # Teste 1: Reflex√£o sobre processo de pensamento
    logger.info("üìã Teste 1: Reflex√£o sobre processo de pensamento")
    process_context = {
        "strategy": "analytical",
        "task_type": "software_development",
        "complexity": "high",
        "steps": ["Analisar requisitos", "Planejar arquitetura", "Implementar c√≥digo"],
        "execution_time": 2.5
    }
    
    thinking_analysis = await metacognitive_engine.reflect_on_thinking_process(process_context)
    logger.info(f"‚úÖ An√°lise de pensamento conclu√≠da - Efetividade: {thinking_analysis.effectiveness_score:.2f}")
    
    # Teste 2: Auto-avalia√ß√£o de capacidades
    logger.info("üìã Teste 2: Auto-avalia√ß√£o de capacidades")
    cognitive_profile = await metacognitive_engine.evaluate_own_capabilities()
    logger.info(f"‚úÖ Auto-avalia√ß√£o conclu√≠da - Meta-awareness: {cognitive_profile.meta_awareness:.2f}")
    
    # Teste 3: Adapta√ß√£o de estrat√©gia de pensamento
    logger.info("üìã Teste 3: Adapta√ß√£o de estrat√©gia de pensamento")
    execution_context = {
        "problem_type": "software_engineering",
        "complexity": "medium",
        "resources": {"a2a_agents": 3}
    }
    
    thinking_strategy = await metacognitive_engine.adapt_thinking_strategy(execution_context)
    logger.info(f"‚úÖ Estrat√©gia adaptada: {thinking_strategy.value}")
    
    # Teste 4: Meta-aprendizado
    logger.info("üìã Teste 4: Meta-aprendizado")
    learning_experience = {
        "task_type": "code_generation",
        "success": True,
        "execution_time": 1.5,
        "learning_effectiveness": 0.8
    }
    
    meta_insight = await metacognitive_engine.meta_learn_from_experience(learning_experience)
    logger.info(f"‚úÖ Meta-aprendizado conclu√≠do: {meta_insight.description}")
    
    # Teste 5: Questionamento de suposi√ß√µes
    logger.info("üìã Teste 5: Questionamento de suposi√ß√µes")
    assumptions_context = {
        "problem_definition": "Criar aplica√ß√£o web",
        "chosen_strategy": "desenvolvimento_incremental"
    }
    
    questions = await metacognitive_engine.question_own_assumptions(assumptions_context)
    logger.info(f"‚úÖ {len(questions)} quest√µes auto-reflexivas geradas")
    for i, question in enumerate(questions[:3]):
        logger.info(f"   {i+1}. {question}")
    
    return metacognitive_engine

async def test_a2a_metacognition_integration():
    """Testa integra√ß√£o entre metacogni√ß√£o e sistema A2A"""
    logger.info("ü§ù Testando Integra√ß√£o Metacogni√ß√£o + A2A...")
    
    # Obter inst√¢ncias
    metacognitive_engine = get_metacognitive_engine()
    intelligent_a2a = get_intelligent_a2a_system()
    
    # Teste 1: Integra√ß√£o metacogni√ß√£o com A2A
    logger.info("üìã Teste 1: Integra√ß√£o metacogni√ß√£o com A2A")
    await intelligent_a2a.integrate_metacognitive_engine(metacognitive_engine)
    logger.info("‚úÖ Integra√ß√£o metacognitiva com A2A conclu√≠da")
    
    # Teste 2: Integra√ß√£o A2A com metacogni√ß√£o  
    logger.info("üìã Teste 2: Integra√ß√£o A2A com metacogni√ß√£o")
    a2a_integration = await metacognitive_engine.integrate_with_a2a_system(intelligent_a2a)
    logger.info(f"‚úÖ Integra√ß√£o A2A com metacogni√ß√£o - Efetividade: {a2a_integration['effectiveness_score']:.2f}")
    
    # Teste 3: Registrar agentes simulados
    logger.info("üìã Teste 3: Registrar agentes simulados")
    await intelligent_a2a.register_intelligent_agent(
        agent_id="test_planner",
        initial_capabilities={
            "performance_metrics": {"planning_speed": 1.2, "plan_quality": 0.9},
            "max_concurrent_tasks": 3,
            "expertise_level": {"CREATE_FILE": 0.8, "EXECUTE_COMMAND": 0.7}
        }
    )
    
    await intelligent_a2a.register_intelligent_agent(
        agent_id="test_executor", 
        initial_capabilities={
            "performance_metrics": {"execution_speed": 1.5, "success_rate": 0.95},
            "max_concurrent_tasks": 5,
            "expertise_level": {"CREATE_FILE": 0.9, "EXECUTE_COMMAND": 0.95}
        }
    )
    
    logger.info("‚úÖ Agentes simulados registrados")
    
    # Teste 4: An√°lise metacognitiva de agente
    logger.info("üìã Teste 4: An√°lise metacognitiva de agente")
    agent_analysis = await intelligent_a2a.metacognitive_agent_analysis("test_executor")
    if "error" not in agent_analysis:
        logger.info(f"‚úÖ An√°lise metacognitiva do agente - Efetividade: {agent_analysis['metacognitive_analysis']['effectiveness_score']:.2f}")
    else:
        logger.warning(f"‚ö†Ô∏è Erro na an√°lise: {agent_analysis['error']}")
    
    # Teste 5: Relat√≥rio metacognitivo de colabora√ß√£o
    logger.info("üìã Teste 5: Relat√≥rio metacognitivo de colabora√ß√£o")
    collab_report = await intelligent_a2a.get_metacognitive_collaboration_report()
    if "error" not in collab_report:
        logger.info(f"‚úÖ Relat√≥rio de colabora√ß√£o gerado - Meta-awareness: {collab_report['collaborative_cognitive_profile']['meta_awareness']:.2f}")
    else:
        logger.warning(f"‚ö†Ô∏è Erro no relat√≥rio: {collab_report['error']}")
    
    return True

async def test_self_model_generation():
    """Testa gera√ß√£o de modelo de auto-consci√™ncia"""
    logger.info("üß© Testando Gera√ß√£o de Modelo de Auto-Consci√™ncia...")
    
    metacognitive_engine = get_metacognitive_engine()
    
    # Gerar modelo de auto-consci√™ncia
    self_model = await metacognitive_engine.generate_self_model()
    
    logger.info("‚úÖ Modelo de auto-consci√™ncia gerado:")
    logger.info(f"   Arquitetura Cognitiva: {len(self_model['cognitive_architecture'])} componentes")
    logger.info(f"   Padr√µes Operacionais: {len(self_model['operational_patterns'])} padr√µes")
    logger.info(f"   Limita√ß√µes: {len(self_model['limitations'])} limita√ß√µes identificadas")
    logger.info(f"   For√ßas: {len(self_model['strengths'])} √°reas de for√ßa")
    logger.info(f"   Meta-conhecimento: {len(self_model['meta_knowledge'])} insights")
    
    return self_model

async def main():
    """Fun√ß√£o principal de teste"""
    logger.info("üöÄ Iniciando Testes de Integra√ß√£o da Metacogni√ß√£o")
    
    try:
        # Teste 1: Funcionalidades b√°sicas da metacogni√ß√£o
        metacognitive_engine = await test_metacognitive_engine()
        logger.info("‚úÖ Teste de funcionalidades b√°sicas: PASSOU")
        
        # Teste 2: Integra√ß√£o A2A + Metacogni√ß√£o
        await test_a2a_metacognition_integration()
        logger.info("‚úÖ Teste de integra√ß√£o A2A + Metacogni√ß√£o: PASSOU")
        
        # Teste 3: Gera√ß√£o de modelo de auto-consci√™ncia
        await test_self_model_generation()
        logger.info("‚úÖ Teste de modelo de auto-consci√™ncia: PASSOU")
        
        logger.info("üéâ TODOS OS TESTES PASSARAM! Metacogni√ß√£o integrada com sucesso.")
        
        # Demonstra√ß√£o final
        logger.info("üß† DEMONSTRA√á√ÉO: Capacidades Metacognitivas Integradas")
        
        # Mostrar estat√≠sticas finais
        cognitive_profile = await metacognitive_engine.evaluate_own_capabilities()
        logger.info(f"üìä Estat√≠sticas Finais:")
        logger.info(f"   ‚Ä¢ For√ßa Anal√≠tica: {cognitive_profile.analytical_strength:.2f}")
        logger.info(f"   ‚Ä¢ For√ßa Criativa: {cognitive_profile.creative_strength:.2f}")
        logger.info(f"   ‚Ä¢ Habilidade Colaborativa: {cognitive_profile.collaborative_ability:.2f}")
        logger.info(f"   ‚Ä¢ Meta-Consci√™ncia: {cognitive_profile.meta_awareness:.2f}")
        logger.info(f"   ‚Ä¢ Limita√ß√µes Identificadas: {len(cognitive_profile.identified_limits)}")
        logger.info(f"   ‚Ä¢ √Åreas de For√ßa: {len(cognitive_profile.strength_areas)}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå ERRO NOS TESTES: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    # Executar testes
    success = asyncio.run(main())
    
    if success:
        print("\nüéä METACOGNI√á√ÉO INTEGRADA COM SUCESSO!")
        print("O sistema Evolux agora possui:")
        print("  üß† Capacidade de pensar sobre como pensa")
        print("  ü§î Auto-reflex√£o sobre processos cognitivos")
        print("  üìö Meta-aprendizado cont√≠nuo")
        print("  ü§ù Metacogni√ß√£o colaborativa com agentes A2A")
        print("  üß© Auto-consci√™ncia estrutural")
        print("  ‚ùì Questionamento de pr√≥prias suposi√ß√µes")
    else:
        print("\n‚ùå FALHA NA INTEGRA√á√ÉO DA METACOGNI√á√ÉO")
        sys.exit(1)